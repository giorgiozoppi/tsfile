cmake_minimum_required(VERSION 3.10 FATAL_ERROR)
file(STRINGS "VERSION" VERSION_STRING)
project(tsfile VERSION "${VERSION_STRING}" LANGUAGES CXX)
set(CMAKE_VERBOSE_MAKEFILE 0)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake")

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Debug)
endif()

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake)
include_directories(include)
include_directories(include/tsfile)
file(GLOB_RECURSE INCLUDE_FILES ${CMAKE_SOURCE_DIR}/include/tsfile/*.h)
file(GLOB_RECURSE SOURCE_FILES_NO_MAIN ${CMAKE_SOURCE_DIR}/src/tsfile/*.cpp)
# for using catch we don't need the main
list(FILTER SOURCE_FILES_NO_MAIN EXCLUDE REGEX ".*main.cpp$")
file(GLOB SOURCES ${CMAKE_SOURCE_DIR}/src/tsfile/*.cpp)
add_library(tsfile STATIC ${SOURCES})
include(${CMAKE_SOURCE_DIR}/cmake/unit_test.cmake)
include(${CMAKE_SOURCE_DIR}/cmake/clang_tools.cmake)
include(${CMAKE_SOURCE_DIR}/cmake/cppcheck.cmake)
if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
  # using Clang
  target_compile_options(tsfile PRIVATE -Wall -Wextra -Werror -std=c++20)
  elseif (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  # using GCC
  target_compile_options(tsfile PRIVATE -Wall -Wextra -Werror -fconcepts -fmodules-ts)
endif()
# TODO: Run -Werror in CI.
